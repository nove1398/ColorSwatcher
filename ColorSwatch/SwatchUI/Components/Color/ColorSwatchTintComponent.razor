<div class="row justify-content-center">

    @for (int i = 0; i < 5; i++)
    {
        <ColorSwatchComponent ColorHex="@(baseColor.ToSeededTint(initialSeed - 0.1f).ToHex())"
                              Height="100" />
        initialSeed -= 0.1f;
    }
</div>

@code {
    [Parameter] public string ColorHex { get; set; }

    [Parameter] public bool IsHex { get; set; }

    private List<string> tintList = new();

    private float initialSeed = 0.9f;
    private RGBColor baseColor = new();

    protected override void OnInitialized() => CalculateTint();

    protected override void OnParametersSet() => CalculateTint();

    private void CalculateTint()
    {
        tintList.Clear();
        initialSeed = 0.9f;

        if (IsHex)
        {

            var r = int.Parse(ColorHex.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);
            var g = int.Parse(ColorHex.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);
            var b = int.Parse(ColorHex.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);
            baseColor = new RGBColor { Red = r, Green = g, Blue = b };
        }
        else
        {
            var color = Color.FromName(ColorHex);
            baseColor.Red = color.R;
            baseColor.Green = color.G;
            baseColor.Blue = color.B;
        }

    }

    public RGBColor ToSeededTint(RGBColor color, float seed)
    {
        return new RGBColor
        {
            Red = (int)(color.Red * seed),
            Green = (int)(color.Green * seed),
            Blue = (int)(color.Blue * seed)
        };
    }
}